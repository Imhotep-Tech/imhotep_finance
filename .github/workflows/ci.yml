name: CI/CD Pipeline

on:
  push:
    branches: [ "*" ]  # Run on all branches
  pull_request:
    branches: [ "main", "master" ]  # Also run on PRs to main/master

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: imhotep_finance_db
          POSTGRES_USER: imhotep_finance_user
          POSTGRES_PASSWORD: imhotep_finance_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client build-essential libpq-dev

    - name: Install Python dependencies
      run: |
        cd backend/imhotep_finance
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=django-insecure-test-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DATABASE_NAME=imhotep_finance_db" >> $GITHUB_ENV
        echo "DATABASE_USER=imhotep_finance_user" >> $GITHUB_ENV
        echo "DATABASE_PASSWORD=imhotep_finance_password" >> $GITHUB_ENV
        echo "DATABASE_HOST=localhost" >> $GITHUB_ENV
        echo "DATABASE_PORT=5432" >> $GITHUB_ENV
        echo "MAIL_PASSWORD=test-password" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_ID=test-client-id" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_SECRET=test-client-secret" >> $GITHUB_ENV

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U imhotep_finance_user -d imhotep_finance_db; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run Django migrations
      run: |
        cd backend/imhotep_finance
        python manage.py makemigrations accounts
        python manage.py makemigrations finance_management
        python manage.py makemigrations
        python manage.py migrate

    - name: Run Django tests
      run: |
        cd backend/imhotep_finance
        python manage.py test finance_management.tests --verbosity=2

    - name: Run all Django tests
      run: |
        cd backend/imhotep_finance
        python manage.py test --verbosity=2

    - name: Check code style (optional)
      run: |
        cd backend/imhotep_finance
        # Install flake8 if you want code style checking
        # pip install flake8
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        echo "Code style check skipped - install flake8 if needed"

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t imhotep-finance-backend:test .

    - name: Test Docker container
      run: |
        # Start PostgreSQL container
        docker run -d --name test-postgres \
          -e POSTGRES_DB=imhotep_finance_db \
          -e POSTGRES_USER=imhotep_finance_user \
          -e POSTGRES_PASSWORD=imhotep_finance_password \
          -p 5432:5432 \
          postgres:15

        # Wait for PostgreSQL to be ready
        sleep 10

        # Run backend container with test environment
        docker run --rm --name test-backend \
          --link test-postgres:db \
          -e DATABASE_HOST=db \
          -e DATABASE_NAME=imhotep_finance_db \
          -e DATABASE_USER=imhotep_finance_user \
          -e DATABASE_PASSWORD=imhotep_finance_password \
          -e SECRET_KEY=django-insecure-test-key \
          -e DEBUG=True \
          -e MAIL_PASSWORD=test-password \
          -e GOOGLE_CLIENT_ID=test-client-id \
          -e GOOGLE_CLIENT_SECRET=test-client-secret \
          imhotep-finance-backend:test \
          python manage.py test finance_management.tests --verbosity=2

        # Cleanup
        docker stop test-postgres
        docker rm test-postgres

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/imhotep_finance/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend/imhotep_finance
        npm ci

    - name: Run frontend tests (if available)
      run: |
        cd frontend/imhotep_finance
        # Uncomment if you have frontend tests
        # npm test
        echo "Frontend tests skipped - add test scripts to package.json if needed"

    - name: Build frontend
      run: |
        cd frontend/imhotep_finance
        npm run build

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install security scanning tools
      run: |
        pip install safety bandit

    - name: Run safety check
      run: |
        cd backend/imhotep_finance
        safety check -r requirements.txt

    - name: Run bandit security scan
      run: |
        cd backend/imhotep_finance
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

  notify:
    runs-on: ubuntu-latest
    needs: [test, docker-test, frontend-test, security-scan]
    if: always()
    
    steps:
    - name: Notify test results
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.docker-test.result }}" == "success" ] && [ "${{ needs.frontend-test.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ All tests passed successfully!"
        else
          echo "❌ Some tests failed. Check the logs above."
          exit 1
        fi
